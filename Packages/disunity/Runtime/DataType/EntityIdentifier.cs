using System;
using System.IO;
using DISUnity.Resources;
using UnityEngine;

namespace DISUnity.DataType
{
    /// <summary>
    /// Unique designation of each entity in an event or exercise.
    /// </summary>
    [Serializable]
    public class EntityIdentifier : SimulationAddress, IEquatable<EntityIdentifier>
    {
        [SerializeField]
        [Tooltip(Tooltips.EntityID)]
        ushort m_EntityID;

        /// <summary>
        /// Size of this data type in bytes
        /// </summary>
        public override int Length => base.Length + 2;

        /// <summary>
        /// Entity ID
        /// </summary>
        public ushort Entity
        {
            get => m_EntityID;
            set => m_EntityID = value;
        }

        /// <summary>
        /// Generated by bit shifting the site, application and entity id into a single long value.
        /// </summary>
        public long HashCode => Site | (long)Application << 16 | (long)m_EntityID << 32;

        public EntityIdentifier()
        {
        }

        public EntityIdentifier(ushort site, ushort application, ushort entity) :
            base(site, application)
        {
            m_EntityID = entity;
        }

        /// <summary>
        /// Decode network data.
        /// </summary>
        /// <param name="br"></param>
        public override void Decode(BinaryReader br)
        {
            base.Decode(br);
            m_EntityID = br.ReadUInt16();
        }

        /// <summary>
        /// Encode data for network transmission.
        /// </summary>
        /// <param name="bw"></param>
        public override void Encode(BinaryWriter bw)
        {
            base.Encode(bw);
            bw.Write(m_EntityID);
        }

        /// <summary>
        /// Returns a string representation.
        /// </summary>
        /// <returns></returns>
        public override string ToString() => $"{Site} : {Application} : {m_EntityID}";

        /// <summary>
        /// Compares internal data for equality.
        /// </summary>
        /// <param name="b"></param>
        /// <returns></returns>
        public bool Equals(EntityIdentifier b)
        {
            if (!base.Equals(b)) return false;
            if (m_EntityID != b.m_EntityID) return false;
            return true;
        }

        /// <summary>
        /// Compares internal data for equality.
        /// </summary>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <returns></returns>
        public static bool Equals(EntityIdentifier a, EntityIdentifier b) => a.Equals(b);
    }
}